import java.awt.*;
import java.io.*;
import java.net.HttpURLConnection;
import java.net.URL;
import java.security.MessageDigest;
import java.util.ArrayList;
import javax.swing.*;
import javax.swing.text.*;

public class PasswordShield {

    private static JPasswordField entry;
    private static JTextPane resultText;
    private static JButton toggleBtn;
    private static boolean hidden = true;

    // --- Check if password leaked using HaveIBeenPwned API ---
    public static boolean check_password_leak(String password) {
        try {
            MessageDigest sha1 = MessageDigest.getInstance("SHA-1");
            byte[] bytes = sha1.digest(password.getBytes("UTF-8"));
            StringBuilder sb = new StringBuilder();
            for (byte b : bytes) {
                sb.append(String.format("%02X", b));
            }
            String sha1Password = sb.toString();
            String first5 = sha1Password.substring(0, 5);
            String tail = sha1Password.substring(5);

            String urlStr = "https://api.pwnedpasswords.com/range/" + first5;
            URL url = new URL(urlStr);
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setRequestMethod("GET");

            if (conn.getResponseCode() != 200) {
                return false;
            }

            BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String line;
            while ((line = in.readLine()) != null) {
                String[] parts = line.split(":");
                if (parts[0].equalsIgnoreCase(tail)) {
                    in.close();
                    return true;
                }
            }
            in.close();
            return false;

        } catch (Exception e) {
            return false;
        }
    }

    // --- Password Strength Logic ---
    public static Object[] password_strength(String password) {
        int score = 0;
        ArrayList<String> suggestions = new ArrayList<>();

        if (password.length() >= 8) {
            score++;
        } else {
            suggestions.add("Use at least 8 characters.");
        }

        if (password.chars().anyMatch(Character::isUpperCase)) {
            score++;
        } else {
            suggestions.add("Include uppercase letters.");
        }

        if (password.chars().anyMatch(Character::isDigit)) {
            score++;
        } else {
            suggestions.add("Add numbers.");
        }

        if (password.matches(".*[!@#$%^&*()\\-_=+\\[{\\]}\\\\|;:'\\\",<.>/?`~].*")) {
            score++;
        } else {
            suggestions.add("Use special characters (!, @, #, etc.)");
        }

        // Simplified: Weak, Medium, Strong
        String strength;
        if (score <= 1) {
            strength = "Weak";
        } else if (score <= 3) {
            strength = "Medium";
        } else {
            strength = "Strong";
        }

        return new Object[]{strength, suggestions, score};
    }

    // --- Analyze Password ---
    public static void analyze_password() {
        String password = new String(entry.getPassword());
        if (password.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please enter a password.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        resultText.setText("");

        Object[] res = password_strength(password);
        String strength = (String) res[0];
        @SuppressWarnings("unchecked")
        ArrayList<String> suggestions = (ArrayList<String>) res[1];
        int score = (int) res[2];

        // Weak → Red, Medium → Orange, Strong → Green
        Color color;
        if (strength.equals("Weak")) {
            color = Color.RED;
        } else if (strength.equals("Medium")) {
            color = Color.ORANGE;
        } else {
            color = new Color(34, 139, 34);
        }

        appendColoredText("🔐 Password Strength: " + strength + "\n", color);

        appendColoredText("\n🛡️ Checking data breach...\n", Color.BLACK);
        try {
            boolean leaked = check_password_leak(password);
            if (leaked) {
                appendColoredText("❌ Your password was found in a breach!\n", Color.RED);
            } else {
                appendColoredText("✅ Not found in any known breach.\n", new Color(34, 139, 34));
            }
        } catch (Exception e) {
            appendColoredText("⚠️ Could not connect to the breach API.\n", Color.ORANGE);
        }

        if (!suggestions.isEmpty()) {
            appendColoredText("\n🔒 Suggestions to strengthen your password:\n", Color.BLACK);
            for (String tip : suggestions) {
                appendColoredText("- " + tip + "\n", Color.DARK_GRAY);
            }
        }
    }

    // --- Toggle Show/Hide ---
    public static void toggle_password() {
        if (hidden) {
            entry.setEchoChar((char) 0);   // Show password
            toggleBtn.setText("🙈 Hide");
        } else {
            entry.setEchoChar('*');       // Hide password
            toggleBtn.setText("👁 Show");
        }
        hidden = !hidden;
    }

    // --- Append with Color ---
    private static void appendColoredText(String text, Color color) {
        StyledDocument doc = resultText.getStyledDocument();
        Style style = resultText.addStyle("ColorStyle", null);
        StyleConstants.setForeground(style, color);
        try {
            doc.insertString(doc.getLength(), text, style);
        } catch (Exception ignored) {}
    }

    // --- GUI ---
    public static void main(String[] args) {
        JFrame root = new JFrame("🔐 Pavithra's Password Shield");
        root.setSize(480, 500);
        root.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        root.setLayout(new BorderLayout());

        JPanel panel = new JPanel();
        panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));
        panel.setBackground(new Color(240, 248, 255));

        JLabel heading = new JLabel("🔒 Password Strength & Safety Checker");
        heading.setFont(new Font("Helvetica", Font.BOLD, 14));
        heading.setAlignmentX(Component.CENTER_ALIGNMENT);
        panel.add(Box.createRigidArea(new Dimension(0, 10)));
        panel.add(heading);

        JLabel lbl = new JLabel("Enter your password:");
        lbl.setFont(new Font("Arial", Font.PLAIN, 11));
        lbl.setAlignmentX(Component.CENTER_ALIGNMENT);
        panel.add(lbl);

        JPanel frame = new JPanel();
        entry = new JPasswordField(30);
        entry.setEchoChar('*'); // default hidden
        toggleBtn = new JButton("👁 Show");
        toggleBtn.setBackground(new Color(33, 150, 243));
        toggleBtn.setForeground(Color.WHITE);
        toggleBtn.addActionListener(e -> toggle_password());

        frame.add(entry);
        frame.add(toggleBtn);
        panel.add(frame);

        JButton checkBtn = new JButton("Check Password");
        checkBtn.setBackground(new Color(76, 175, 80));
        checkBtn.setForeground(Color.WHITE);
        checkBtn.addActionListener(e -> analyze_password());
        panel.add(checkBtn);

        resultText = new JTextPane();
        resultText.setEditable(false);
        JScrollPane scrollPane = new JScrollPane(resultText);
        scrollPane.setPreferredSize(new Dimension(450, 300));
        panel.add(scrollPane);

        JLabel footer = new JLabel("© Pavithra | Cybersecurity Dept | 2025");
        footer.setFont(new Font("Arial", Font.PLAIN, 9));
        footer.setForeground(Color.GRAY);
        footer.setAlignmentX(Component.CENTER_ALIGNMENT);
        panel.add(footer);

        root.add(panel, BorderLayout.CENTER);
        root.setVisible(true);
    }
}
